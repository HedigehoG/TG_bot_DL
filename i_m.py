import requests
import debugpy # https://github.com/microsoft/debugpy

import asyncio
import aiohttp
import sys
import re
import os
import time
import random
import threading
import logging
from dotenv import load_dotenv
from urllib.parse import urlparse, quote

from instagrapi import Client # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º—É instagrapi
from instagrapi.exceptions import ( # –ò—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ instagrapi
	LoginRequired,
	ChallengeRequired,
	BadCredentials,
	BadPassword,
	TwoFactorRequired,
	PrivateError,
	ClientError # ClientError —Ç–∞–∫–∂–µ –µ—Å—Ç—å –≤ instagrapi
)
from pydantic import ValidationError

# pip install google-genai
from google import genai
from google.genai.types import Tool, GoogleSearch, GenerateContentConfig

from aiogram import Bot, Dispatcher, types, F 
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message, URLInputFile, InputMediaVideo, BufferedInputFile
from aiogram.enums import ParseMode, ChatAction
from aiogram.exceptions import TelegramAPIError
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiohttp import web
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application


import redis.asyncio as redis

import json
import uuid
from bs4 import BeautifulSoup

from typing import Optional

from aiohttp_socks import ProxyConnector

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º stem –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Tor
from stem.control import Controller
from stem.connection import AuthenticationFailure

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
TG_IDS_RAW = os.getenv("TG_IDS")
if not TG_IDS_RAW: exit("TG_IDS is not set")
TG_IDS = TG_IDS_RAW.split(",")  # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram Bot ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN: exit("BOT_TOKEN is not set")
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
if not GOOGLE_API_KEY: exit("GOOGLE_API_KEY is not set")
client = genai.Client() # the API is automatically loaded from the environement variable
MODEL_20 = "gemini-2.0-flash"
MODEL_25 = "gemini-2.5-flash"

# --- Webhook settings ---
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET")
# –ü—É—Ç—å –¥–ª—è –≤–µ–±—Ö—É–∫–∞. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –ø—É—Ç–∏ ‚Äî –ø—Ä–æ—Å—Ç–∞—è –º–µ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
WEBHOOK_PATH = f"/bot{BOT_TOKEN}"
# –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π —Å–ª—ç—à –≤ –∫–æ–Ω—Ü–µ WEBHOOK_HOST, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω—ã—Ö —Å–ª—ç—à–µ–π // –≤ –∏—Ç–æ–≥–æ–≤–æ–º URL.
BASE_WEBHOOK_URL = f"{WEBHOOK_HOST.rstrip('/')}{WEBHOOK_PATH}"

# --- Web server settings ---
# –ê–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–ª—É—à–∞—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.
WEB_SERVER_HOST = "0.0.0.0"
WEB_SERVER_PORT = int(os.getenv("LISTEN_PORT", 8080))

# --- Redis ---
REDIS_HOST = os.getenv("REDIS_HOST", "localhost")
REDIS_PORT = int(os.getenv("REDIS_PORT", 6379))
r = redis.Redis(host=REDIS_HOST, port=REDIS_PORT, decode_responses=True)


# --- insta dev ---
IG_DEVICE_CONFIG = {
	"my_config": {
		# –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç Samsung Galaxy S23 Ultra –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –¥—Ä—É–≥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
		"user_agent": "Instagram 360.0.0.30.109 Android (33/13; 640dpi; 1440x3088; samsung; SM-S918B; d2s; qcom; en_US; 674228472)",
		"device": {
			"app_version": "360.0.0.30.109",
			"android_version": 33,
			"android_release": "13",
			"dpi": "640dpi",
			"resolution": "1440x3088",
			"manufacturer": "samsung",
			"model": "SM-S918B",
			"device": "d2s",
			"cpu": "qcom",
			"language": "en_US" # –°–º–µ–Ω–∏–º —è–∑—ã–∫ –Ω–∞ en_US –¥–ª—è –±–æ–ª—å—à–µ–π "–Ω–µ–∑–∞–º–µ—Ç–Ω–æ—Å—Ç–∏"
		}
	}
}

# --- –ö–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ—Ç–ª–∞–¥–∫–∏ —á–µ—Ä–µ–∑ debugpy ---
# –ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–∫—É:
# 1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è DEBUG_MODE=1 –≤ –≤–∞—à–µ–º .env —Ñ–∞–π–ª–µ.
# 2. –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–±—Ä–æ—Å –ø–æ—Ä—Ç–∞ 5678 –≤ docker-compose.yml.
# 3. –ü–µ—Ä–µ—Å–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: docker-compose up -d --force-recreate
if os.getenv("DEBUG_MODE") == "1":
	try:
		logging.info("üöÄ –†–ï–ñ–ò–ú –û–¢–õ–ê–î–ö–ò –ê–ö–¢–ò–í–ò–†–û–í–ê–ù. –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–ª–∞–¥—á–∏–∫–∞ –Ω–∞ –ø–æ—Ä—Ç—É 5678...")
		debugpy.listen(("0.0.0.0", 5678))
		debugpy.wait_for_client()
	except Exception as e:
		logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å debugpy: {e}")

# --- Bot –∏ Dispatcher ---
bot = Bot(token=BOT_TOKEN) #,session=my_custom_session
dp = Dispatcher()

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ Instagrapi ---
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É, —Ç–∞–∫ –∫–∞–∫ –¥–æ—Å—Ç—É–ø –∫ –∫—ç—à—É –±—É–¥–µ—Ç –∏–∑ —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
INSTA_CLIENTS_CACHE = {}
INSTA_CLIENTS_LOCK = threading.Lock()

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é AI ---
async def classify_message_with_ai(text: str) -> dict:
	# –ü—Ä–æ–º–ø—Ç –±—ã–ª –ø–µ—Ä–µ–ø–∏—Å–∞–Ω –¥–ª—è –±–æ–ª—å—à–µ–π —è—Å–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏.
	# –û–Ω —Ç–µ–ø–µ—Ä—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —á–∏—Å—Ç—É—é "—Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é" –¥–ª—è –º–æ–¥–µ–ª–∏ Gemini.
	# f-—Å—Ç—Ä–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ JSON.
	# –í–Ω–µ—à–Ω–∏–µ {} - –¥–ª—è f-—Å—Ç—Ä–æ–∫–∏, —Å–¥–≤–æ–µ–Ω–Ω—ã–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ {{}} - –¥–ª—è –ª–∏—Ç–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–∫–æ–±–æ–∫ –≤ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ.
	prompt = f'''You are a message classifier for a music bot. Your task is to analyze the user's message and return a single, valid JSON object with two keys: "type" and "content". Do not add any other text, just the JSON.

The possible values for "type" are: "song", "instagram_link", "yandex_music_link", "sberzvuk_link", "mts_music_link", or "chat".

Follow these rules for classification:

1.  **Type: "song"**
	*   If the message appears to be a song title and/or artist name (even with typos or incomplete).
	*   The "content" should be a JSON object: {{"song": "Corrected Artist - Corrected Title", "duration": DURATION_IN_SECONDS}}.
	*   Use your knowledge and the provided search tool to find the correct artist, title, and duration in seconds.
	*   If duration is unknown, use 0.
	*   Example: for "–ó–∞—Ç–æ—á–∫–∞ - –º–∫–∂–∏–∫", you should return a "song" type with content like {{"song": "–ó–∞—Ç–æ—á–∫–∞ - –ü–æ—Å–ª–µ–¥–Ω–∏–π –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –º—É–∂–∏–∫", "duration": 266}}.

2.  **Type: "instagram_link"**
	*   If the message is a valid Instagram post link (e.g., `https://www.instagram.com/p/ABC123/`).
	*   The "content" should be a JSON object: {{"shortcode": "SHORTCODE"}}.
	*   Example: for `https://www.instagram.com/p/Cxyz123/`, the shortcode is `Cxyz123`.

3.  **Type: "yandex_music_link"**
	*   If the message is a Yandex Music track link (e.g., `https://music.yandex.com/album/123/track/456`).
	*   The "content" should be a JSON object: {{"track_id": "TRACK_ID"}}.
	*   Example: for the link above, the track_id is `456`.

4.  **Type: "sberzvuk_link"**
	*   If the message is a SberZvuk (zvuk.com) track link (e.g., `https://zvuk.com/track/123`).
	*   The "content" should be a JSON object: {{"track_id": "TRACK_ID"}}.
	*   Example: for the link above, the track_id is `123`.

5.  **Type: "mts_music_link"**
	*   If the message is an MTS Music track link (e.g., `https://music.mts.ru/track/789`).
	*   The "content" should be a JSON object: {{"track_id": "TRACK_ID"}}.
	*   Example: for the link above, the track_id is `789`.

6.  **Type: "chat"**
	*   If the message does not match any of the types above, classify it as "chat".
	*   The "content" should be the original user message as a string.

The user's message will be provided as the main content to process. Analyze it and return only the JSON object.
'''
	try:
		response = await client.aio.models.generate_content(
			model=MODEL_20,			
			contents=text,
			config=GenerateContentConfig(
				tools=[Tool(google_search=GoogleSearch())],
				response_mime_type="application/json",
				system_instruction=prompt,
			),
		)
		return json.loads(response.text)
	except Exception as e:
		logging.error(f"–û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ AI Gemini: {e}")
		return {"type": "chat", "content": text}


import pyshorteners
def shorten_url(url):
	"""–°–æ–∫—Ä–∞—â–∞–µ—Ç URL —Å –ø–æ–º–æ—â—å—é TinyURL."""
	s = pyshorteners.Shortener()
	try:
		# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º URL –≤ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç HttpUrl
		url_str = str(url)
		short_url = s.tinyurl.short(url_str)
		return short_url
	except Exception as e:
		logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–∏ URL {url}: {e}")
		return None


# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã IP-–∞–¥—Ä–µ—Å–∞ Tor ---
def check_tor_connection(control_port=9051, cookie_path="/run/tor/control.authcookie", renew=False):
	"""
	–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Tor —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä.
	–ò—Å–ø–æ–ª—å–∑—É–µ—Ç CookieAuthentication.
	"""
	try:
		with Controller.from_port(port=control_port) as controller:
			controller.authenticate()  # cookie auth by default
			logging.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Tor.")

			if controller.is_alive():
				logging.info("üü¢ Tor —Ä–∞–±–æ—Ç–∞–µ—Ç. –í–µ—Ä—Å–∏—è: %s", controller.get_version())
				if renew:
					logging.info("üîÑ –ù–æ–≤–∞—è —Ü–µ–ø–æ—á–∫–∞ Tor (–ø–µ—Ä–µ–∑–∞–ø—Ä–æ—Å IP)...")
					controller.signal("NEWNYM")
					# –î–∞–µ–º Tor –≤—Ä–µ–º—è –Ω–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–ø–æ—á–∫–∏
					time.sleep(2)
					# –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ IP –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã —Å–∞–º –∑–∞–ø—Ä–æ—Å —à–µ–ª —á–µ—Ä–µ–∑ Tor
					tor_proxy = "socks5h://127.0.0.1:9050" # –ò—Å–ø–æ–ª—å–∑—É–µ–º socks5h –¥–ª—è DNS —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
					proxies = { "http": tor_proxy, "https": tor_proxy }
					try:
						# –ò—Å–ø–æ–ª—å–∑—É–µ–º requests —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–æ–∫—Å–∏
						response = requests.get('https://check.torproject.org/api/ip', proxies=proxies, timeout=10)
						logging.info(f"Tor IP check: {response.json()}")
					except requests.exceptions.RequestException as e:
						logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ IP —á–µ—Ä–µ–∑ Tor: {e}")
				return True
			else:
				logging.warning("‚ùå –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")
				return False

	except AuthenticationFailure as e:
		logging.error("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: %s", e)
		return False
	except Exception as e:
		logging.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Tor: %s", e)
		return False

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è Instagram ---
# –ü—Ä–∏–º–µ—Ä: "http://user:password@host:port" –∏–ª–∏ "socks5://host:port"
INSTAGRAM_PROXY = os.getenv("INSTAGRAM_PROXY")

def get_proxy(args=None):
	proxies = {
		"instagram": lambda: INSTAGRAM_PROXY,
		"tor": lambda: "socks5://127.0.0.1:9050" if check_tor_connection() else None,
		"freeproxy": lambda: None
	}
	proxy = proxies.get(args, lambda: None)()
	logging.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏: {proxy}")
	return proxy


# --- –ö–æ–º–∞–Ω–¥–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@dp.message(CommandStart())
async def command_start_handler(message: Message):
	await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –Ø –±–æ—Ç —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –æ—Ç Google Gemini.")


@dp.message(F.text, ~F.text.startswith('/'))
async def ai_router_handler(message: Message):
	processing_msg = await message.reply("ü§î –î—É–º–∞—é...")
	classification = await classify_message_with_ai(message.text)
	await processing_msg.delete()
	intent_type, content = classification.get("type"), classification.get("content")
	if intent_type == "instagram_link": await handle_instagram_link(message, content)
	elif intent_type == "yandex_music_link": await handle_yandex_music(message, content)
	elif intent_type == "song": await handle_song_search(message, content)
	elif intent_type == "sberzvuk_link": await handle_sberzvuk_music(message, content)
	elif intent_type == "mts_music_link": await handle_mts_music(message, content)
	else: await handle_chat_request(message, message.text)


# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Instagrapi ---
INSTA_REDIS_KEY = 'insta'
# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram Bot API (–≤ –±–∞–π—Ç–∞—Ö)
MAX_VIDEO_SIZE_BYTES = 50 * 1024 * 1024 # 50 MB

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Instagram ---
def get_instagram_client(user_id: str, session_data: dict | None = None, username: str | None = None, password: str | None = None) -> Client | None:
	# --- –ü–æ–ø—ã—Ç–∫–∞ 0: –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç –∏–∑ –∫—ç—à–∞ –≤ –ø–∞–º—è—Ç–∏ (–ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ) ---
	cached_client = None
	with INSTA_CLIENTS_LOCK:
		cached_client = INSTA_CLIENTS_CACHE.get(user_id)

	if cached_client:
		try:
			# –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –∂–∏–≤–∞ –ª–∏ —Å–µ—Å—Å–∏—è (–í–ù–ï –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —á—Ç–æ–±—ã –Ω–µ —Ç–æ—Ä–º–æ–∑–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ—Ç–æ–∫–∏)
			cached_client.get_timeline_feed()
			logging.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç instagrapi –¥–ª—è user {user_id}")
			return cached_client
		except (LoginRequired, ChallengeRequired, ClientError) as e:
			logging.warning(f"‚ö†Ô∏è –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è user {user_id} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: {e}. –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞.")
			# –£–¥–∞–ª—è–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –≥–æ–Ω–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
			with INSTA_CLIENTS_LOCK:
				# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –≤ –∫—ç—à–µ –≤—Å–µ –µ—â–µ —Ç–æ—Ç —Å–∞–º—ã–π, –∫–æ—Ç–æ—Ä—ã–π –º—ã –ø—Ä–æ–≤–µ—Ä—è–ª–∏
				if INSTA_CLIENTS_CACHE.get(user_id) == cached_client:
					del INSTA_CLIENTS_CACHE[user_id]

	# --- –ï—Å–ª–∏ –≤ –∫—ç—à–µ –Ω–µ—Ç –∏–ª–∏ –æ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π ---
	new_client = None

	# –ü–æ–ø—ã—Ç–∫–∞ 1: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –∏–∑ Redis
	if session_data:
		cl = Client()
		cl.delay_range = [1, 4]
		proxy = get_proxy("instagram")
		if proxy: cl.set_proxy(proxy)
		try:
			cl.set_settings(session_data)
			cl.get_timeline_feed()
			logging.info(f"‚úÖ –í—Ö–æ–¥ –ø–æ —Å–µ—Å—Å–∏–∏ –¥–ª—è user {user_id} –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ")
			new_client = cl
		except Exception as e:
			logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –¥–ª—è user {user_id}: {e}. –ü—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏ –ø–æ –ø–∞—Ä–æ–ª—é.")

	# –ü–æ–ø—ã—Ç–∫–∞ 2: –í–æ–π—Ç–∏ –ø–æ –ª–æ–≥–∏–Ω—É –∏ –ø–∞—Ä–æ–ª—é (–µ—Å–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ —Å–µ—Å—Å–∏–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å)
	if not new_client and username and password:
		cl = Client()
		cl.delay_range = [1, 6]
		proxy = get_proxy("instagram")
		if proxy: cl.set_proxy(proxy)
		try:
			cl.set_user_agent(IG_DEVICE_CONFIG["my_config"]["user_agent"])
			cl.set_device(IG_DEVICE_CONFIG["my_config"]["device"])
			cl.login(username, password)
			logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –ø–æ –ª–æ–≥–∏–Ω—É/–ø–∞—Ä–æ–ª—é –¥–ª—è user {user_id}")
			new_client = cl
		except (ChallengeRequired, BadPassword) as e:
			logging.warning(f"‚ùó –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è user {user_id}: {e}")
		except Exception as e:
			logging.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞ –¥–ª—è user {user_id}: {e}")

	# –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –≤ –∫—ç—à
	if new_client:
		with INSTA_CLIENTS_LOCK:
			INSTA_CLIENTS_CACHE[user_id] = new_client

	return new_client

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ–¥–∏–∞
def get_media_info_private(client: Client, code: str) -> dict:
	"""
	–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≤ –ø–æ—Ç–æ–∫–µ.
	–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π private_request –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—ã—Ä–æ–≥–æ JSON,
	—á—Ç–æ–±—ã –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –≤–µ—Ä—Å–∏—è–º –≤–∏–¥–µ–æ ('video_versions').
	"""
	pk = client.media_pk_from_code(code)
	try:
		logging.info(f"–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞ {code} —á–µ—Ä–µ–∑ private_request...")
		# –ò—Å–ø–æ–ª—å–∑—É–µ–º v1, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
		media_data = client.private_request(f'media/{pk}/info/')
		media = media_data.get('items', [{}])[0]

		result = {
			"video_url": None,
			"video_versions": [],
			"owner_username": media.get('user', {}).get('username', 'unknown_user'),
			"video_duration": media.get('video_duration', 0), # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
			"is_video": False,
			"is_carousel": False,
			"shortcode": code
		}

		versions_to_sort = []
		# Case 1: Single Video Post
		if media.get('media_type') == 2 and media.get('video_versions'):
			result["is_video"] = True
			versions_to_sort = media.get('video_versions')

		# Case 2: Carousel Post
		elif media.get('media_type') == 8 and media.get('carousel_media'):
			result["is_carousel"] = True
			for r in media['carousel_media']:
				# Find the first video in the carousel
				if r.get('media_type') == 2 and r.get('video_versions'):
					result["is_video"] = True
					versions_to_sort = r.get('video_versions')
					break # Found a video, stop searching
		
		if versions_to_sort:
			# 1. –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –≤–µ—Ä—Å–∏–π –ø–æ URL, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ.
			# API —á–∞—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ —Ñ–∞–π–ª–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ 'type'.
			unique_versions = []
			seen_urls = set()
			for v in versions_to_sort:
				url = v.get('url')
				if url and url not in seen_urls:
					unique_versions.append(v)
					seen_urls.add(url)
			
			# 2. –°–æ—Ä—Ç–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –ø–æ –±–∏—Ç—Ä–µ–π—Ç—É (bandwidth) –æ—Ç —Ö—É–¥—à–µ–≥–æ –∫ –ª—É—á—à–µ–º—É.
			# –≠—Ç–æ –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞, —á–µ–º –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ.
			unique_versions.sort(key=lambda v: v.get('bandwidth', 0))
			
			result["video_versions"] = unique_versions
			result["video_url"] = unique_versions[-1]['url'] if unique_versions else None # URL –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞

		return result

	except Exception as e:
		logging.error(f"private_request –¥–ª—è pk {pk} –Ω–µ —É–¥–∞–ª—Å—è: {e}")
		return {}

# --- –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏ –¥–ª—è instagrapi ---
async def load_session_from_redis(user_id):
	"""–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–∑ Redis."""
	session_data_str = await r.hget(f"{INSTA_REDIS_KEY}:user0", user_id)
	if session_data_str:
		try:
			return json.loads(session_data_str)
		except json.JSONDecodeError:
			logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
			return None
	return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –≤ Redis
async def save_session_to_redis(user_id, session_data_dict):
	"""–°–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å–µ—Å—Å–∏–∏ –≤ JSON –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ Redis."""
	session_data_str = json.dumps(session_data_dict)
	await r.hset(f"{INSTA_REDIS_KEY}:user0", user_id, session_data_str)
	logging.info(f"–°–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Redis")


# --- –ö–æ–º–∞–Ω–¥–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@dp.message(Command("igpass"))
async def cmd_igpass(message: Message):
	user_id = str(message.from_user.id)
	params = message.text.split()[1:]
	if len(params) != 2:
		await message.answer("‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.**\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/igpass <–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å>`", parse_mode=ParseMode.MARKDOWN)
		return

	username, password = params
	await message.answer("‚è≥ –ê–≤—Ç–æ—Ä–∏–∑—É—é—Å—å...")

	session_data = await load_session_from_redis(user_id)
	cl = await asyncio.to_thread(get_instagram_client, user_id, session_data, username, password)

	if cl:
		new_settings = cl.get_settings()
		await save_session_to_redis(user_id, new_settings)
		await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
	else:
		await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –∏–ª–∏ –ø—Ä–æ–π–¥–∏ challenge —á–µ—Ä–µ–∑ Instagram.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ Instagram
@dp.message(Command("iglogout"))
async def cmd_iglogout(message: Message):
	user_id = str(message.from_user.id)
	# –ê—Ç–æ–º–∞—Ä–Ω–æ –∏ –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç –∏–∑ –∫—ç—à–∞ –≤ –ø–∞–º—è—Ç–∏, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å.
	# .pop() —è–≤–ª—è–µ—Ç—Å—è –∞—Ç–æ–º–∞—Ä–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π –≤ CPython, —á—Ç–æ –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –≥–æ–Ω–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π.
	if INSTA_CLIENTS_CACHE.pop(user_id, None):
		logging.info(f"–ö–ª–∏–µ–Ω—Ç –¥–ª—è user {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∫—ç—à–∞ –ø–∞–º—è—Ç–∏.")
	deleted_count = await r.hdel(f"{INSTA_REDIS_KEY}:user0", user_id)
	await message.reply("‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã." if deleted_count > 0 else "ü§î –í—ã –∏ —Ç–∞–∫ –Ω–µ –±—ã–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò --------------------------------------------------------------------------
		
# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Instagram-—Å—Å—ã–ª–æ–∫ ---
async def handle_instagram_link(message: Message, content: dict): # url —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∏–∑ ai_router_handler
	p_msg = await message.reply("üîó –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ Instagram") # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

	shortcode = content.get('shortcode')
	url = message.text
	if not shortcode:
		# –¢–µ–ø–µ—Ä—å –ø–∞—Ä—Å–∏–º shortcode –≤–Ω—É—Ç—Ä–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞
		regexp_shortcode = re.search(r'(?:instagram\.com|instagr\.am)/(?:p|reel|tv)/([\w-]+)', url)
		shortcode = regexp_shortcode.group(1) if regexp_shortcode else None

		if not shortcode:
			await p_msg.edit_text("‚ùå **–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ Instagram.**\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `https://www.instagram.com/p/shortcode/`")
			return
	
	user_id = str(message.from_user.id) 
	history_key = f"{INSTA_REDIS_KEY}:download_history"

	# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–æ–∫ –≤ Redis (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è)
	try:
		download_info_json = await r.hget(history_key, shortcode)
		if download_info_json:
			logging.info(f"–ü–æ—Å—Ç {shortcode} —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ. –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Redis.")
			try:
				download_info = json.loads(download_info_json)
				content_type = download_info.get('type')

				if content_type == 'video':
					file_id = download_info.get('file_id')
					cached_original_post_url = download_info.get('original_post_url')
					cached_owner_username = download_info.get('owner_username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

					if file_id and cached_original_post_url: 
						try:
							await bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.UPLOAD_VIDEO)
							
							# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∏–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
							caption = (
								f"üìπ <a href='{cached_original_post_url}'>‚û°Ô∏èüíØüÖ∂</a>\n"
								f"¬©: <code>{cached_owner_username}</code>"
							)
							
							if p_msg:
								await p_msg.edit_media(media=InputMediaVideo(media=file_id, caption=caption, parse_mode=ParseMode.HTML))
							else:
								await bot.send_video(message.chat.id, video=file_id, caption=caption, parse_mode=ParseMode.HTML)
							logging.info(f"–í–∏–¥–µ–æ –¥–ª—è {shortcode} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ file_id –∏–∑ Redis —Å –ø–æ–¥–ø–∏—Å—å—é.")
							await message.delete()
							return
						except TelegramAPIError as e:
							logging.error(f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ file_id –¥–ª—è {shortcode}: {e}")
						except Exception as e:
							logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ file_id –¥–ª—è {shortcode}: {e}")
				elif content_type == 'link':
					# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –¥–ª—è SaveFrom.net
					cached_original_post_url = download_info.get('original_post_url') 
					owner_username = download_info.get('owner_username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
					if cached_original_post_url:
						savefrom_url = f"https://en.savefrom.net/#url={cached_original_post_url}"
						shortened_savefrom_url = shorten_url(savefrom_url)
						final_link = shortened_savefrom_url if shortened_savefrom_url else savefrom_url

						reason = download_info.get('reason')
						size_mb = download_info.get('size_mb')
						reason_text = ""
						if reason == 'too_large' and size_mb:
							reason_text = f"‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ({size_mb} –ú–ë), –ø–æ—ç—Ç–æ–º—É Telegram –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é.\n\n"
						elif reason == 'carousel':
							reason_text = "‚ÑπÔ∏è –≠—Ç–æ –≤–∏–¥–µ–æ –∏–∑ –∫–∞—Ä—É—Å–µ–ª–∏. –î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ.\n\n"

						caption = (
							f"üìπ <a href='{cached_original_post_url}'>‚û°Ô∏èüíØüÖ∂</a>\n" # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∑–¥–µ—Å—å
							f"¬©: <code>{owner_username}</code>\n\n"
							f"{reason_text}"
							f"–ö–∞—á–∞–π –æ—Ç—Å—é–¥–∞: {final_link}"
						)
						await p_msg.edit_text(caption, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
						logging.info(f"–°—Å—ã–ª–∫–∞ –Ω–∞ SaveFrom.net –¥–ª—è {shortcode} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–∑ Redis (–ø—Ä–∏—á–∏–Ω–∞: {reason}).")
						await message.delete()
						return
			except json.JSONDecodeError:
				logging.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–æ–∫ –¥–ª—è shortcode {shortcode}")
			except Exception as e:
				logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–æ–∫ –∏–∑ Redis –¥–ª—è shortcode {shortcode}: {e}")
	except Exception as e:
		logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–æ–∫ –≤ Redis –¥–ª—è shortcode {shortcode}: {e}")

	# --- –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ---
	await p_msg.edit_text("üîë –ü—Ä–æ–≤–µ—Ä—è—é —Å–µ—Å—Å–∏—é Instagram...")

	# 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ Redis
	session_data = await load_session_from_redis(user_id)
	if not session_data:
		logging.warning(f"–ù–µ—Ç —Å–µ—Å—Å–∏–∏ Instagram –¥–ª—è user {user_id}. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.")
		await p_msg.edit_text("‚ùå **–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.**\n–í–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ `/igpass <–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å>`.")
		return

	# 2. –ü–æ–ª—É—á–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç instagrapi
	# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å asyncio
	cl = await asyncio.to_thread(get_instagram_client, user_id, session_data)

	if not cl:
		logging.warning(f"–°–µ—Å—Å–∏—è –¥–ª—è user {user_id} –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.")
		await p_msg.edit_text("‚ùå **–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞!**\n–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ `/igpass`.")
		return

	# 3. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ–¥–∏–∞
	try:
		await p_msg.edit_text("‚ÑπÔ∏è –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ...")
		
		# –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º (–∫–∞–∫ –±—É–¥—Ç–æ –æ–Ω —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ –ø–æ—Å—Ç)
		user_like_delay = random.uniform(1.5, 3.5)
		logging.info(f"–ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_like_delay:.2f} —Å–µ–∫.")
		await asyncio.sleep(user_like_delay)

		logging.info(f"–î–æ—Å—Ç—É–ø –∫ {shortcode} –¥–ª—è user {user_id} —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π.")
		await bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)

		video_info = await asyncio.to_thread(get_media_info_private, cl, shortcode)

		if not video_info or not video_info.get("is_video"):
			await p_msg.edit_text("‚ùå –í —ç—Ç–æ–º –ø–æ—Å—Ç–µ –Ω–µ—Ç –≤–∏–¥–µ–æ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
			return

		video_url = video_info.get("video_url")
		if not video_url:
			await p_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ URL –≤–∏–¥–µ–æ.")
			return

		if video_info.get("is_carousel"):
			savefrom_url = f"https://en.savefrom.net/#url={url}"
			shortened_savefrom_url = shorten_url(savefrom_url)
			final_link = shortened_savefrom_url if shortened_savefrom_url else savefrom_url
			caption = (
				f"üìπ <a href='{url}'>‚û°Ô∏èüíØüÖ∂</a>\n"
				f"¬©: <code>{video_info.get('owner_username')}</code>\n\n"
				f"–ö–∞—á–∞–π –æ—Ç—Å—é–¥–∞: {final_link}"
			)
			await p_msg.edit_text(caption, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
			logging.info(f"–°—Å—ã–ª–∫–∞ –Ω–∞ SaveFrom.net –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏ {shortcode} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
			await message.delete()
			try:
				download_info_to_save = json.dumps({
					'type': 'link', 'reason': 'carousel',
					'original_post_url': url,
					'owner_username': video_info.get('owner_username'),
					'timestamp': time.time()
				})
				await r.hset(history_key, shortcode, download_info_to_save)
				logging.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å—Ç–∞ {shortcode} (–∫–∞—Ä—É—Å–µ–ª—å) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Redis.")
			except Exception as e:
				logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ Redis –¥–ª—è shortcode {shortcode}: {e}")
		else:
			try:
				await p_msg.edit_text("üì• –°–∫–∞—á–∏–≤–∞—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ...")
				download_delay = random.uniform(2.0, 4.0)
				logging.info(f"–ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º: {download_delay:.2f} —Å–µ–∫.")
				await asyncio.sleep(download_delay)

				# --- –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ –±–∏—Ç—Ä–µ–π—Ç—É ---
				video_versions = video_info.get("video_versions", [])
				duration = video_info.get("video_duration", 0)

				if not video_versions:
					await p_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–µ—Ä—Å–∏–∏ –≤–∏–¥–µ–æ –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—Ç–µ.")
					return
				if duration <= 0:
					await p_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞.")
					logging.warning(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –¥–ª—è {shortcode} —Ä–∞–≤–Ω–∞ –Ω—É–ª—é, —Ä–∞—Å—á–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
					return

				url_to_send = None
				caption_note = ""
				best_vsize = 0
				
				# –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–µ—Ä—Å–∏–∏ –æ—Ç –ª—É—á—à–µ–π –∫ —Ö—É–¥—à–µ–π
				await p_msg.edit_text(f"‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(video_versions)} –≤–µ—Ä—Å–∏–π –≤–∏–¥–µ–æ. –ü–æ–¥–±–∏—Ä–∞—é –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–æ —Ä–∞–∑–º–µ—Ä—É...")
				
				for version in reversed(video_versions):
					if not version.get('url'):
						continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç URL
					
					# –†–∞—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
					vsize = (version.get('bandwidth', 0) * duration) / 8
					if best_vsize == 0: # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–∞–º–æ–π –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
						best_vsize = vsize
					
					logging.info(f"–ü—Ä–æ–≤–µ—Ä—è—é –≤–µ—Ä—Å–∏—é ({version.get('width')}x{version.get('height')}), —Ä–∞—Å—á–µ—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {vsize:.0f} –±–∞–π—Ç")
					
					if 0 < vsize <= MAX_VIDEO_SIZE_BYTES:
						logging.info(f"–ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è –≤–µ—Ä—Å–∏—è! ({version.get('width')}x{version.get('height')}).")
						url_to_send = version.get('url')
						if version != video_versions[-1]: # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–∞–º–∞—è –ª—É—á—à–∞—è –≤–µ—Ä—Å–∏—è
							caption_note = f" (–≤–µ—Ä—Å–∏—è —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º {version.get('width')}x{version.get('height')})"
						break # –ù–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞

				if url_to_send:
					await p_msg.edit_text(f"‚úÖ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É...")
					await bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.UPLOAD_VIDEO)
					video = URLInputFile(str(url_to_send), filename=f"{shortcode}.mp4")
					caption = f"üìπ <a href='{url}'>‚û°Ô∏èüíØüÖ∂</a>{caption_note}\n¬©: <code>{video_info.get('owner_username')}</code>"
					upd_mes = await p_msg.edit_media(media=InputMediaVideo(media=video, caption=caption, parse_mode=ParseMode.HTML))
					file_id = upd_mes.video.file_id
					logging.info(f"–í–∏–¥–µ–æ –¥–ª—è {shortcode} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Telegram —Å file_id: {file_id}")
					if file_id:
						try:
							download_info_to_save = json.dumps({
								'type': 'video', 'file_id': file_id, 'msg_id': message.message_id,
								'chat_id': message.chat.id, 'original_post_url': url,
								'owner_username': video_info.get('owner_username'), 'timestamp': time.time()
							})
							await r.hset(history_key, shortcode, download_info_to_save)
							logging.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–∞ {shortcode} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Redis.")
							await message.delete()
						except Exception as e:
							logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–æ–∫ –≤ Redis –¥–ª—è {shortcode}: {e}")
				else: # –ï—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –≤–µ—Ä—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
					logging.info(f"–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–µ—Ä—Å–∏–π –≤–∏–¥–µ–æ –¥–ª—è {shortcode} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤–ª—è—é —Å—Å—ã–ª–∫—É.")
					savefrom_url = f"https://en.savefrom.net/#url={url}"
					shortened_savefrom_url = shorten_url(savefrom_url)
					final_link = shortened_savefrom_url if shortened_savefrom_url else savefrom_url
					vsize_mb_str = f"{best_vsize / (1024*1024):.2f}"
					caption = (
						f"‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (–ø—Ä–∏–º–µ—Ä–Ω–æ {vsize_mb_str} –ú–ë), –∞ –≤–µ—Ä—Å–∏–∏ –ø–æ–º–µ–Ω—å—à–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. "
						f"Telegram –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é.\n\n"
						f"–ö–∞—á–∞–π –æ—Ç—Å—é–¥–∞: {final_link}"
					)
					await p_msg.edit_text(caption, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
					try:
						download_info_to_save = json.dumps({
							'type': 'link', 'reason': 'too_large', 'size_mb': vsize_mb_str,
							'original_post_url': url, 'owner_username': video_info.get('owner_username'),
							'timestamp': time.time()
						})
						await r.hset(history_key, shortcode, download_info_to_save)
						logging.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–æ–ª—å—à–æ–≥–æ –≤–∏–¥–µ–æ {shortcode} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Redis.")
					except Exception as e:
						logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ Redis –¥–ª—è {shortcode}: {e}")
					await message.delete()
					return
			except Exception as e:
				logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ {shortcode}: {e}")
				shortened_video_url = shorten_url(video_url)
				if shortened_video_url:
					await p_msg.edit_text(f"–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ {shortcode} –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–ø—Ä—è–º—É—é. –í–æ—Ç —Å—Å—ã–ª–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞—á–∞—Ç—å —Å–∞–º–∏:\n{shortened_video_url}", parse_mode=ParseMode.HTML)
				else:
					await p_msg.edit_text(f"–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ {shortcode} –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–ø—Ä—è–º—É—é. –í–æ—Ç —Å—Å—ã–ª–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞—á–∞—Ç—å —Å–∞–º–∏:\n{video_url}", parse_mode=ParseMode.HTML)
	except (BadCredentials, LoginRequired, ChallengeRequired):
		logging.warning(f"–°–µ—Å—Å–∏—è –¥–ª—è user {user_id} –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.")
		await p_msg.edit_text("‚ùå **–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞!**\n–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ `/igpass`.")
	except ValidationError as e:
		logging.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Instagram (instagrapi): {e}")
		await p_msg.edit_text("‚ùå **–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Instagram.**\n"
							  "–ü–æ—Ö–æ–∂–µ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å. "
							  "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Å—Ç.")
	except ClientError as e:
		error_message = str(e)
		if "checkpoint_required" in error_message:
			error_message = "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ (—á–µ–∫–ø–æ–π–Ω—Ç). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Instagram."
		elif "challenge_required" in error_message:
			error_message = "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (challenge). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Instagram."
		elif "proxy" in error_message.lower():
			error_message = "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ IP-–∞–¥—Ä–µ—Å–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π VPN/IP."
		else:
			error_message = f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ Instagram API: `{error_message}`"
		logging.error(f"–û—à–∏–±–∫–∞ instagrapi –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—Ç–µ –¥–ª—è user {user_id}: {e}")
		await p_msg.edit_text(f"‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç Instagram API!</b>\n{error_message}", parse_mode=ParseMode.HTML)
	except PrivateError:
		await p_msg.edit_text("‚ùå **–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å!**\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π.")
	except Exception as e:
		logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
		await p_msg.edit_text(f"‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:**\n`{e}`")

# –ú—É–∑ —Å–µ—Ä–≤–∏—Å—ã
async def handle_yandex_music(message: Message, content: dict):
	p_msg = await message.reply("üé∂ –ò—â–µ–º —Ç—Ä–µ–∫ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ...")

	track_id = content.get('track_id')
	if not track_id:
		# Fallback regex if AI fails to extract ID
		track_pattern = re.compile(r'music\.yandex\.ru/album/\d+/track/(\d+)')
		match = track_pattern.search(message.text)
		if not match:
			await p_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID —Ç—Ä–µ–∫–∞ –∏–∑ —Å—Å—ã–ª–∫–∏.")
			return
		track_id = match.group(1)

	# 1. Get Tor proxy
	proxy_url = get_proxy('tor')
	if not proxy_url:
		await p_msg.edit_text("‚ö†Ô∏è Tor-–ø—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
		return

	# 2. Setup aiohttp session with proxy
	connector = ProxyConnector.from_url(proxy_url)
	headers = {
		'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36',
		'Accept': 'application/json',
		'Accept-Language': 'en-US,en;q=0.5',
	}
	
	api_url = f'https://api.music.yandex.net/tracks/{track_id}'
	music_info = None
	MAX_ATTEMPTS = 3

	async with aiohttp.ClientSession(connector=connector, headers=headers) as session:
		for attempt in range(1, MAX_ATTEMPTS + 1):
			await p_msg.edit_text(f"üé∂ –ò—â–µ–º —Ç—Ä–µ–∫... (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{MAX_ATTEMPTS})")
			try:
				logging.info(f"–ó–∞–ø—Ä–æ—Å –∫ {api_url} —á–µ—Ä–µ–∑ Tor...")
				async with session.get(api_url, timeout=15) as response:
					if response.status == 200:
						data = await response.json()
						track_data = data.get('result', [])[0] if data.get('result') else None
						if track_data:
							title = track_data.get('title')
							artists = ', '.join([a.get('name') for a in track_data.get('artists', [])])
							duration_ms = track_data.get('durationMs', 0)
							
							# --- –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–ª—å–±–æ–º–µ ---
							cover_uri = None
							album_title = "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
							album_year = ""
							if track_data.get('albums'):
								album_data = track_data['albums'][0]
								cover_uri = album_data.get('coverUri')
								album_title = album_data.get('title', "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
								album_year = f"({album_data.get('year')})" if album_data.get('year') else ""
							
							cover_url = f"https://{cover_uri.replace('%%', '400x400')}" if cover_uri else None
							
							music_info = {
								'artist': artists,
								'title': title,
								'duration_sec': duration_ms // 1000,
								'cover_url': cover_url,
								'album_title': album_title,
								'album_year': album_year,
								'source_url': message.text # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
							}
							logging.info(f"–ù–∞–π–¥–µ–Ω —Ç—Ä–µ–∫: {artists} - {title}")
							break # Success, exit loop
					else:
						logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}: –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞ –≤–µ—Ä–Ω—É–ª–∞ —Å—Ç–∞—Ç—É—Å {response.status}. –¢–µ–∫—Å—Ç: {await response.text(encoding='utf-8', errors='ignore')}")
						if attempt < MAX_ATTEMPTS:
							await p_msg.edit_text(f"‚ö†Ô∏è –û—Ç–≤–µ—Ç {response.status}. –ú–µ–Ω—è—é IP Tor...")
							check_tor_connection(renew=True)
							await asyncio.sleep(3)
						
			except Exception as e:
				logging.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ: {e}")
				if attempt < MAX_ATTEMPTS:
					await p_msg.edit_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ú–µ–Ω—è—é IP Tor...")
					check_tor_connection(renew=True)
					await asyncio.sleep(3)

	if music_info:
		# --- –°–Ω–∞—á–∞–ª–∞ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ ---
		duration_sec = music_info.get('duration_sec', 0)
		minutes, seconds = divmod(duration_sec, 60)
		info_caption = (
			f"<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {music_info['artist']}\n"
			f"<b>–¢—Ä–µ–∫:</b> {music_info['title']}\n"
			f"<b>–ê–ª—å–±–æ–º:</b> {music_info['album_title']} {music_info['album_year']}\n"
			f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {minutes}:{seconds:02d}\n"
			f"<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> <a href='{music_info['source_url']}'>–Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞</a>"
		)

		# –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ò—â–µ–º..." –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
		await p_msg.delete()
		if music_info['cover_url']:
			p_msg = await message.answer_photo(
				photo=music_info['cover_url'],
				caption=info_caption,
				parse_mode=ParseMode.HTML
			)
		else:
			p_msg = await message.answer(info_caption, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
		await message.delete() # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

		# --- –¢–µ–ø–µ—Ä—å –∏—â–µ–º —Ç—Ä–µ–∫ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Å–∞–π—Ç–∞—Ö ---
		song_obj = {
			'song': f"{music_info['artist']} - {music_info['title']}",
			'duration': music_info['duration_sec']
		}
		# –í—ã–∑—ã–≤–∞–µ–º –ø–æ–∏—Å–∫ –±–µ–∑ p_msg, —á—Ç–æ–±—ã –æ–Ω —Å–æ–∑–¥–∞–ª –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–µ —Ç—Ä–æ–≥–∞–ª —ç—Ç–æ
		await handle_song_search(message, song_obj)
	else:
		await p_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫. –°–µ—Ä–≤–∏—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ Tor.")

async def handle_sberzvuk_music(message: Message, content: dict):
	"""–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç—Ä–µ–∫–∏ –∏–∑ –ó–≤—É–∫ (zvuk.com), –≤–∫–ª—é—á–∞—è –∫–æ—Ä–æ—Ç–∫–∏–µ share.zvuk.com."""
	p_msg = await message.reply("üé∂ –ò—â–µ–º —Ç—Ä–µ–∫ –≤ –ó–≤—É–∫...")

	async def resolve_zvuk_url(url):
		"""–ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –∫–æ—Ä–æ—Ç–∫–∞—è, —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –µ—ë, –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–∫ –µ—Å—Ç—å."""
		if "share.zvuk.com" in url:
			headers = {
				'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
				'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
				'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
			}
			async with aiohttp.ClientSession(headers=headers) as session:
				async with session.get(url, allow_redirects=True, timeout=10) as response:
					if response.status == 200:
						return str(response.url)
					else:
						return None
		return url

	# 1. –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É (—Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫—É—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
	original_url = message.text
	final_url = await resolve_zvuk_url(original_url)
	if not final_url:
		await p_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–∫—Ä—ã—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É –ó–≤—É–∫.")
		return

	# 2. –ò–∑–≤–ª–µ–∫–∞–µ–º track_id –∏–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
	track_id = None
	match = re.search(r'zvuk\.com/track/(\d+)', final_url)
	if match:
		track_id = match.group(1)

	if not track_id:
		# –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å ID –æ—Ç AI –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
		track_id = content.get('track_id')
		if not track_id:
			await p_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID —Ç—Ä–µ–∫–∞ –∏–∑ —Å—Å—ã–ª–∫–∏ –ó–≤—É–∫.")
			return

	# 3. –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∏ –∏–Ω—Ñ—É –æ —Ç—Ä–µ–∫–µ
	headers = {
		'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
		'Accept': 'application/json, text/plain, */*',
		'Origin': 'https://zvuk.com',
	}
	music_info = None
	try:
		async with aiohttp.ClientSession() as session:
			async with session.get("https://zvuk.com/api/tiny/profile", headers=headers, timeout=10) as resp:
				if resp.status != 200:
					await p_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –æ—Ç –ó–≤—É–∫.")
					return
				data = await resp.json(content_type=None)
				token = data.get("result", {}).get("token")
			if not token:
				await p_msg.edit_text("‚ùå –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –æ—Ç –ó–≤—É–∫ –ø—É—Å—Ç.")
				return

			payload = {
				"operationName": "getFullTrack",
				"variables": {"id": track_id},
				"query": """
					query getFullTrack($id: ID!) {
					  getTracks(ids: [$id]) {
						title
						duration
						artists { title }
						release {
						  title
						  date
						  image { src }
						}
					  }
					}
				"""
			}
			graphql_headers = {
				"User-Agent": headers["User-Agent"],
				"Accept": headers["Accept"],
				"Origin": headers["Origin"],
				"x-auth-token": token
			}
			async with session.post("https://zvuk.com/api/v1/graphql", json=payload, headers=graphql_headers, timeout=10) as resp:
				if resp.status == 200:
					data = await resp.json(content_type=None)
					tracks_list = data.get("data", {}).get("getTracks", [])
					if tracks_list:
						track_data = tracks_list[0]
						if track_data: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–µ–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞–π–¥–µ–Ω, –∞ –Ω–µ null
							title = track_data.get('title')
							artists = ', '.join([a.get('title') for a in track_data.get('artists', [])])
							duration_sec = track_data.get('duration', 0)
							release_info = track_data.get('release', {})
							album_title = release_info.get('title', "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
							album_date = release_info.get('date')
							album_year_val = album_date.split('-')[0] if album_date else None
							album_year = f"({album_year_val})" if album_year_val else ""
							cover_url = release_info.get("image", {}).get("src")
							music_info = {
								'artist': artists, 'title': title, 'duration_sec': duration_sec,
								'cover_url': cover_url, 'album_title': album_title, 'album_year': album_year,
								'source_url': message.text
							}
							logging.info(f"–ù–∞–π–¥–µ–Ω —Ç—Ä–µ–∫ –≤ –ó–≤—É–∫: {artists} - {title}")
				else:
					logging.warning(f"Zvuk (graphql) –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status}. –û—Ç–≤–µ—Ç: {await resp.text()}")
	except Exception as e:
		logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏ –ó–≤—É–∫: {e}", exc_info=True)
		await p_msg.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ó–≤—É–∫: `{e}`")
		return

	if music_info:
		duration_sec = music_info.get('duration_sec', 0)
		minutes, seconds = divmod(duration_sec, 60)
		info_caption = (
			f"<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {music_info.get('artist')}\n"
			f"<b>–¢—Ä–µ–∫:</b> {music_info.get('title')}\n"
			f"<b>–ê–ª—å–±–æ–º:</b> {music_info.get('album_title')} {music_info.get('album_year')}\n"
			f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {minutes}:{seconds:02d}\n"
			f"<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> <a href='{music_info.get('source_url')}'>–ó–≤—É–∫</a>"
		)
		await p_msg.delete()
		if music_info.get('cover_url'):
			await message.answer_photo(photo=music_info['cover_url'], caption=info_caption, parse_mode=ParseMode.HTML)
		else:
			await message.answer(info_caption, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
		await message.delete()
		song_obj = {'song': f"{music_info['artist']} - {music_info['title']}", 'duration': music_info['duration_sec']}
		await handle_song_search(message, song_obj)
	else:
		await p_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ –∏–∑ –ó–≤—É–∫.")
		
async def handle_mts_music(message: Message, content: dict):
	"""–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç—Ä–µ–∫–∏ –∏–∑ –ú–¢–° –ú—É–∑—ã–∫–∞ (music.mts.ru)."""
	p_msg = await message.reply("üé∂ –ò—â–µ–º —Ç—Ä–µ–∫ –≤ –ú–¢–° –ú—É–∑—ã–∫–∞...")

	track_id = content.get('track_id')
	if not track_id:
		track_pattern = re.compile(r'music\.mts\.ru/track/(\d+)')
		match = track_pattern.search(message.text)
		if not match:
			await p_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID —Ç—Ä–µ–∫–∞ –∏–∑ —Å—Å—ã–ª–∫–∏ –ú–¢–° –ú—É–∑—ã–∫–∞.")
			return
		track_id = match.group(1)

	page_url = f"https://music.mts.ru/track/{track_id}"
	music_info = None

	try:
		async with aiohttp.ClientSession() as session:
			async with session.get(page_url, timeout=10) as response:
				if response.status == 200:
					soup = BeautifulSoup(await response.text(), 'html.parser')
					ld_json_script = soup.find('script', type='application/ld+json')
					if ld_json_script:
						data = json.loads(ld_json_script.string)
						title = data.get('name')
						artists = ', '.join([a.get('name') for a in data.get('byArtist', [])])
						album_title = data.get('inAlbum', {}).get('name', "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
						album_year = f"({data.get('inAlbum', {}).get('datePublished')})" if data.get('inAlbum', {}).get('datePublished') else ""
						cover_url = data.get('image')
						
						duration_sec = 0
						duration_iso = data.get('duration') # PT3M25S
						if duration_iso:
							match = re.search(r'PT(?:(\d+)M)?(?:(\d+)S)?', duration_iso)
							if match:
								minutes = int(match.group(1) or 0)
								seconds = int(match.group(2) or 0)
								duration_sec = minutes * 60 + seconds

						music_info = {
							'artist': artists, 'title': title, 'duration_sec': duration_sec,
							'cover_url': cover_url, 'album_title': album_title, 'album_year': album_year,
							'source_url': message.text
						}
						logging.info(f"–ù–∞–π–¥–µ–Ω —Ç—Ä–µ–∫ –≤ –ú–¢–° –ú—É–∑—ã–∫–∞: {artists} - {title}")
				else:
					logging.warning(f"–ú–¢–° –ú—É–∑—ã–∫–∞ –≤–µ—Ä–Ω—É–ª–∞ —Å—Ç–∞—Ç—É—Å {response.status}")
	except Exception as e:
		logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ú–¢–° –ú—É–∑—ã–∫–∞: {e}")

	if music_info:
		duration_sec = music_info.get('duration_sec', 0)
		minutes, seconds = divmod(duration_sec, 60)
		info_caption = (
			f"<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {music_info['artist']}\n"
			f"<b>–¢—Ä–µ–∫:</b> {music_info['title']}\n"
			f"<b>–ê–ª—å–±–æ–º:</b> {music_info['album_title']} {music_info['album_year']}\n"
			f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {minutes}:{seconds:02d}\n"
			f"<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> <a href='{music_info['source_url']}'>–ú–¢–° –ú—É–∑—ã–∫–∞</a>"
		)
		await p_msg.delete()
		if music_info['cover_url']:
			await message.answer_photo(photo=music_info['cover_url'], caption=info_caption, parse_mode=ParseMode.HTML)
		else:
			await message.answer(info_caption, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
		await message.delete()

		song_obj = {'song': f"{music_info['artist']} - {music_info['title']}", 'duration': music_info['duration_sec']}
		await handle_song_search(message, song_obj)
	else:
		await p_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ –∏–∑ –ú–¢–° –ú—É–∑—ã–∫–∞.")

# --- –ï–î–ò–ù–´–ô –ü–ê–†–°–ï–† –ú–£–ó–´–ö–ê–õ–¨–ù–´–• –°–ê–ô–¢–û–í ---

def _parse_duration_mm_ss(duration_str: str) -> int:
	"""–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ 'MM:SS'."""
	if not isinstance(duration_str, str): return 0
	try:
		time_parts = duration_str.strip().split(':')
		return int(time_parts[0]) * 60 + int(time_parts[1])
	except (ValueError, IndexError):
		return 0

def _extractor_muzika_fun(item: BeautifulSoup, base_url: str) -> Optional[dict]:
	"""–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∞–π—Ç–∞ muzika.fun."""
	link_element = item.select_one('[data-url]')
	if not link_element: return None
	return {
		"link": link_element.get('data-url'),
		"artist": item.get('data-artist'),
		"title": item.get('data-title'),
		"duration": int(item.get('data-duration', 0))
	}

def _extractor_mp3iq(item: BeautifulSoup, base_url: str) -> Optional[dict]:
	"""–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∞–π—Ç–∞ mp3iq.net (–Ω–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)."""
	# –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —Ç–µ–≥–∞ <li>
	link = item.get('data-mp3')
	duration_ms = item.get('data-duration')
	# –ò–∑–≤–ª–µ–∫–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
	artist_a = item.select_one('h2.playlist-name b a')
	title_a = item.select_one('h2.playlist-name em a')
	
	if not all([link, duration_ms, artist_a, title_a]): return None
	
	try:
		duration_sec = int(duration_ms) // 1000
	except (ValueError, TypeError):
		duration_sec = 0

	return {
		"link": link,
		"artist": artist_a.text.strip(),
		"title": title_a.text.strip(),
		"duration": duration_sec
	}

def _extractor_mp3party(item: BeautifulSoup, base_url: str) -> Optional[dict]:
	"""–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∞–π—Ç–∞ mp3party.net."""
	user_panel = item.find('div', class_='track__user-panel')
	duration_div = item.find('div', class_='track__info-item')
	link_btn = item.find('div', class_='play-btn')

	if not all([user_panel, duration_div, link_btn]): return None
	
	return {
		"link": link_btn.get('href'),
		"artist": user_panel.get('data-js-artist-name'),
		"title": user_panel.get('data-js-song-title'),
		"duration": _parse_duration_mm_ss(duration_div.text)
	}

async def _parse_music_site(config: dict, song_name: str) -> Optional[list]:
	"""–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Å–∞–π—Ç–æ–≤, —É–ø—Ä–∞–≤–ª—è–µ–º—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π."""
	search_url = config["base_url"] + config["search_path"].format(query=quote(song_name))
	
	session_args = {"headers": config.get("headers", {})}
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞
	proxy_type = config.get("proxy")
	if proxy_type:
		proxy_url = get_proxy(proxy_type)
		if proxy_url:
			connector = ProxyConnector.from_url(proxy_url)
			session_args["connector"] = connector
		else:
			logging.warning(f"–ü—Ä–æ–∫—Å–∏ '{proxy_type}' –¥–ª—è —Å–∞–π—Ç–∞ {config['name']} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –±–µ–∑ –ø—Ä–æ–∫—Å–∏.")

	try:
		async with aiohttp.ClientSession(**session_args) as session:
			async with session.get(search_url, timeout=15) as response:
				if response.status != 200:
					logging.error(f"–û—à–∏–±–∫–∞ HTTP {response.status} –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {search_url}")
					return None
				soup = BeautifulSoup(await response.text(), 'html.parser')
	except Exception as e:
		logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {search_url}: {e}", exc_info=True)
		return None

	parsed_songs = []
	song_list = soup.select(config["item_selector"])
	if not song_list:
		logging.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –ø–µ—Å–µ–Ω –Ω–∞ {search_url} –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É '{config['item_selector']}'")
		return None

	for item in song_list:
		try:
			song_data = config["extractor_func"](item, config["base_url"])
			if song_data and all(song_data.values()):
				parsed_songs.append(song_data)
		except Exception as e:
			logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ {config['name']}: {e}")
			continue
	
	return parsed_songs if parsed_songs else None

BASE_HEADERS = {
	"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
	"Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8",
	"Accept-Language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
}

SEARCH_PROVIDER_CONFIGS = [
	{
		"name": "muzika.fun",
		"base_url": "https://w1.muzika.fun",
		"search_path": "/search/{query}",
		"item_selector": "ul.mainSongs li",
		"extractor_func": _extractor_muzika_fun,
		"headers": BASE_HEADERS,
	},
	{
		"name": "mp3iq.net",
		"base_url": "https://mp3iq.net",
		"search_path": "/search/f/{query}/",
		"item_selector": "li.track",
		"extractor_func": _extractor_mp3iq,
		"headers": {**BASE_HEADERS, "Referer": "https://mp3iq.net/"},
		"proxy": "tor", # –î–ª—è —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è Tor
	},
	{
		"name": "mp3party.net",
		"base_url": "https://mp3party.net",
		"search_path": "/search?q={query}",
		"item_selector": "div.track.song-item",
		"extractor_func": _extractor_mp3party,
		"headers": {**BASE_HEADERS, "Referer": "https://mp3party.net/"},
	},
]

def normalize_for_match(s: str) -> str:
	"""–£–¥–∞–ª—è–µ—Ç –≤—Å–µ, –∫—Ä–æ–º–µ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä, –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."""
	if not s: return ""
	return re.sub(r'[^a-z–∞-—è0-9]', '', s.lower())

async def handle_song_search(message: Message, song_obj: dict):
	"""
	–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –ø–µ—Å–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ.
	–§–∏–ª—å—Ç—Ä—É–µ—Ç –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏.
	"""
	song_name = song_obj.get('song')
	duration = song_obj.get('duration') or 0

	status_msg = await message.answer(f"üé§ –ò—â—É ¬´{song_name}¬ª –Ω–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö...")
	
	# --- 1. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ ---
	tasks = [_parse_music_site(provider, song_name) for provider in SEARCH_PROVIDER_CONFIGS]
	results = await asyncio.gather(*tasks, return_exceptions=True)

	all_songs = []
	for i, result in enumerate(results):
		if isinstance(result, list):
			all_songs.extend(result)

	if not all_songs:
		await status_msg.edit_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
		return

	# --- 2. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ ---
	normalized_query = normalize_for_match(song_name)
	
	# –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, —Å–Ω–∞—á–∞–ª–∞ —Ç–æ—á–Ω—ã–µ, –ø–æ—Ç–æ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ
	filtered_songs = [s for s in all_songs if normalize_for_match(f"{s.get('artist')} {s.get('title')}") == normalized_query]
	if not filtered_songs:
		filtered_songs = [s for s in all_songs if normalized_query in normalize_for_match(f"{s.get('artist')} {s.get('title')}")]

	songs_to_process = filtered_songs if filtered_songs else all_songs
	
	if duration > 0:
		songs_to_process.sort(key=lambda s: abs(s.get('duration', 0) - duration))

	# –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
	unique_songs = []
	seen = set()
	for song in songs_to_process:
		identifier = (normalize_for_match(song.get('artist')), normalize_for_match(song.get('title')))
		if identifier not in seen:
			unique_songs.append(song)
			seen.add(identifier)
	
	logging.info(f"–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å {len(unique_songs)} —Ç—Ä–µ–∫–æ–≤.")

	if unique_songs:
		# --- –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –≤—Å–µ–≥–æ 1 —Ç—Ä–µ–∫, —Å—Ä–∞–∑—É –µ–≥–æ –∑–∞–≥—Ä—É–∂–∞–µ–º ---
		if len(unique_songs) == 1:
			song = unique_songs[0]
			await status_msg.edit_text(f"‚úÖ –ù–∞–π–¥–µ–Ω –æ–¥–∏–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–∫, —Å–∫–∞—á–∏–≤–∞—é...")
			audio_data = await download_audio(song.get('link'))
			if audio_data:
				await message.answer_audio(audio=BufferedInputFile(audio_data, filename=f"{song.get('artist')}-{song.get('title')}.mp3"), performer=song.get('artist'), title=song.get('title'), duration=song.get('duration'))
				await status_msg.delete()
			else:
				await status_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞.")
			return

		await status_msg.delete() # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ò—â—É..."
		await display_music_list(message, unique_songs)
	else:
		await status_msg.edit_text("‚ùå –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–µ–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.")

async def download_audio(url):
	try:
		async with aiohttp.ClientSession() as session:
			async with session.get(url, timeout=10) as response:
				if response.status != 200:
					logging.error(f"–û—à–∏–±–∫–∞ HTTP {response.status} –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {url}")
					return None
				data = await response.read()
				logging.info(f"–£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å {url}")
				return data
	except Exception as e:
		logging.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ —Å {url}: {e}")
		return None

async def display_music_list(message: Message, list_music: list, items_per_page: int = 5):
	user_id = str(message.from_user.id)
	uid = uuid.uuid4().hex
	state = {"list": list_music, "current_page": 0, "items_per_page": items_per_page}
	await r.set(f"music_session:{user_id}:{uid}", json.dumps(state), ex=600)
	num_pages = -(-len(list_music) // items_per_page)
	keyboard = create_keyboard(list_music, 0, items_per_page, uid, num_pages)
	text = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ ({len(list_music)}). –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:"
	await message.answer(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)

def create_keyboard(list_music: list, page: int, items_per_page: int, uid: str, num_pages: int):
	builder = InlineKeyboardBuilder()
	start_idx, end_idx = page * items_per_page, min((page + 1) * items_per_page, len(list_music))
	for idx in range(start_idx, end_idx):
		song = list_music[idx]
		minutes, seconds = divmod(song.get("duration", 0), 60)
		builder.button(
			text=f"üéß {song.get('artist')} - {song.get('title')} ({minutes}:{seconds:02d})",
			callback_data=f"select_song:{idx}:{uid}"
		)
	builder.adjust(1)
	nav_buttons = []
	if page > 0:
		nav_buttons.append(types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_page:{uid}"))
	nav_buttons.append(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel:{uid}"))
	if page < num_pages - 1:
		nav_buttons.append(types.InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"next_page:{uid}"))
	if nav_buttons:
		builder.row(*nav_buttons)
	return builder.as_markup()

@dp.callback_query(F.data.startswith(("select_song", "prev_page", "next_page", "cancel")))
async def handle_callback_query(callback: types.CallbackQuery):
	action, *params = callback.data.split(":")
	uid = params[-1]
	user_id = str(callback.from_user.id)
	state_data = await r.get(f"music_session:{user_id}:{uid}")
	if not state_data:
		await callback.answer("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞.", show_alert=True)
		await callback.message.delete()
		return
	state = json.loads(state_data)
	
	if action == "select_song":
		idx = int(params[0])
		song = state["list"][idx]
		await callback.answer(f"–ó–∞–≥—Ä—É–∂–∞—é: {song.get('artist')}...")
		audio_data = await download_audio(song.get('link'))
		if audio_data:
			await callback.message.answer_audio(
				audio=BufferedInputFile(audio_data, filename=f"{song.get('artist')}-{song.get('title')}.mp3"),
				performer=song.get('artist'),
				title=song.get('title'),
				duration=song.get('duration')
			)
			# await callback.message.delete()
		else:
			await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.", show_alert=True)
	elif action in ["prev_page", "next_page"]:
		state["current_page"] += 1 if action == "next_page" else -1
		await r.set(f"music_session:{user_id}:{uid}", json.dumps(state), ex=600)
		num_pages = -(-len(state["list"]) // state["items_per_page"])
		keyboard = create_keyboard(state["list"], state["current_page"], state["items_per_page"], uid, num_pages)
		await callback.message.edit_reply_markup(reply_markup=keyboard)
	elif action == "cancel":
		await callback.message.delete()
		await r.delete(f"music_session:{user_id}:{uid}")
		await callback.answer("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.")
	await callback.answer()


async def handle_chat_request(message: Message, text: str):
	p_msg = await message.reply("ü§ñ...")
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π
	try:
		response = await client.aio.models.generate_content(
			model=MODEL_25,
			contents=text,
			config=genai.types.GenerateContentConfig(
				tools=[{"google_search": {}}],
				system_instruction="You are a helpful assistant with access to real-time Google Search. Use search when needed to answer accurately. Answer in a user question language"
			)
		)
		await p_msg.edit_text(response.text)
	except Exception as e:
		logging.error(f"–û—à–∏–±–∫–∞ —á–∞—Ç–∞ Gemini: {e}")
		await p_msg.edit_text("üòï –ú–æ–π AI-–º–æ–∑–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω.")


async def on_startup(bot: Bot) -> None:
	"""–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞."""
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≤–µ–±—Ö—É–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
	if not all([WEBHOOK_HOST, WEBHOOK_SECRET]):
		logging.critical("WEBHOOK_HOST –∏–ª–∏ WEBHOOK_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã! –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–∞.")
		sys.exit(1)

	try:
		# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ–±—Ö—É–∫–µ
		current_webhook = await bot.get_webhook_info()

		# –ï—Å–ª–∏ URL –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ü–µ–ª–µ–≤—ã–º, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—É—é –∏ —á–∏—Å—Ç—É—é –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫—É.
		# –≠—Ç–æ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É, –∫–æ–≥–¥–∞ –≤–µ–±—Ö—É–∫ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –ø—É—Å—Ç—ã–º URL).
		if current_webhook.url != BASE_WEBHOOK_URL:
			logging.info(f"–¢–µ–∫—É—â–∏–π URL –≤–µ–±—Ö—É–∫–∞ ('{current_webhook.url or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}') –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ. –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
			
			# –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å —á–∏—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
			await bot.delete_webhook(drop_pending_updates=True)
			logging.info("–°—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω (–∏–ª–∏ –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω).")
			
			# –ó–∞—Ç–µ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π.
			await bot.set_webhook(url=BASE_WEBHOOK_URL, secret_token=WEBHOOK_SECRET)
			logging.info(f"–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {BASE_WEBHOOK_URL}")
		else:
			logging.info(f"–í–µ–±—Ö—É–∫ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {BASE_WEBHOOK_URL}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É.")

	except TelegramBadRequest as e:
		# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞
		if "Failed to resolve host" in e.message:
			logging.critical(
				f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: Telegram –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Ö–æ—Å—Ç '{WEBHOOK_HOST}'. "
				"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
				"1. –û—à–∏–±–∫–∞ –≤ –¥–æ–º–µ–Ω–Ω–æ–º –∏–º–µ–Ω–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π WEBHOOK_HOST.\n"
				"2. DNS-–∑–∞–ø–∏—Å—å –µ—â–µ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å (—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Ä–µ–º—è –Ω–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ).\n"
				"3. –ü—Ä–æ–±–ª–µ–º—ã —Å DNS-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º –∏–ª–∏ —Å–µ—Ç–µ–≤—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.\n"
			)
		else:
			logging.critical(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
		sys.exit(1)
	except Exception as e:
		logging.critical(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
		sys.exit(1)

async def on_shutdown(bot: Bot) -> None:
	"""–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: —É–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
	logging.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
	await bot.delete_webhook()
	logging.info("–í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω.")
	await r.close()
	logging.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –∑–∞–∫—Ä—ã—Ç–æ.")

async def main():
	# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
	dp.startup.register(on_startup)
	dp.shutdown.register(on_shutdown)

	# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ aiohttp
	app = web.Application()

	# –°–æ–∑–¥–∞–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è healthcheck, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç docker-compose.yml
	async def health_check(request: web.Request) -> web.Response:
		return web.Response(text="OK")
	app.router.add_get("/health", health_check)

	# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤
	webhook_requests_handler = SimpleRequestHandler(
		dispatcher=dp, bot=bot, secret_token=WEBHOOK_SECRET,
	)
	# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
	webhook_requests_handler.register(app, path=WEBHOOK_PATH)

	# "–ú–æ–Ω—Ç–∏—Ä—É–µ–º" –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∏ –±–æ—Ç–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ aiohttp
	setup_application(app, dp, bot=bot)

	# –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
	runner = web.AppRunner(app)
	await runner.setup()
	site = web.TCPSite(runner, WEB_SERVER_HOST, WEB_SERVER_PORT)
	logging.info(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ webhook –Ω–∞ http://{WEB_SERVER_HOST}:{WEB_SERVER_PORT}")
	await site.start()

	# –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ –∂–¥–µ–º, –ø–æ–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
	await asyncio.Event().wait()

if __name__ == "__main__":
	logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
	try:
		asyncio.run(main())
	except KeyboardInterrupt:
		# –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C
		logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é (KeyboardInterrupt).")
	except SystemExit as e:
		# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∑–æ–≤–æ–≤ sys.exit()
		if e.code == 0 or e.code is None:
			logging.info("–ë–æ—Ç —à—Ç–∞—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")
		else:
			logging.critical(f"–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ (exit code: {e.code}).")
